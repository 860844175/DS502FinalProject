install.packages("ggthemes")
install.packages("scales")
install.packages("dplyr")
install.packages("e1071")
install.packages("corrplot")
install.packages("mice")
install.packages("randomForest")
install.packages("GGally")
install.packages("data.table")
install.packages("gridExtra")
library(ggplot2)
setwd("~/OneDrive - Worcester Polytechnic Institute (wpi.edu)/2020Fall/DS502/DS502FinalProject/Shijing_lasso")
library(ggplot2)
train = read.csv()
train = read.csv("train.csv")
train = read.csv("train_p.csv")
head(train)
data.train = read.csv("./data/train.csv")
head(data.train)
dim(data.train)
sum(sapply(train[,1:81],typeof) == "character")
sum(sapply(data.train[,1:81],typeof) == "character")
sum(sapply(data.train[,1:81],typeof) == "integer")
summary(train[,sapply(data.train[,1:81],typeof) == "integer"])
paste("Train has",dim(train)[1], "rows and", dim(train)[2], "columns")
paste("Train has",dim(data.train)[1], "rows and", dim(data.train)[2], "columns")
paste("Original training data set has",dim(data.train)[1], "rows and", dim(data.train)[2], "columns")
knitr::opts_chunk$set(echo = TRUE)
sum(is.na(data.train)) / (nrow(data.train) *ncol(data.train))
paste("The percentage of data missing in the original training data set is", sum(is.na(data.train)) / (nrow(data.train) *ncol(data.train)))
paste("The percentage of data missing in the original training data set is", round(sum(is.na(data.train)) / (nrow(data.train) *ncol(data.train),2)))
paste("The percentage of data missing in the original training data set is", round(sum(is.na(data.train)) / (nrow(data.train) *ncol(data.train)),2))
paste("The percentage of data missing in the original training data set is", round(sum(is.na(data.train)) / (nrow(data.train) *ncol(data.train)),4))
paste("The percentage of data missing in the original training data set is", round(sum(is.na(data.train)) / (nrow(data.train) *ncol(data.train)),4)*100,"%",sep = "")
paste("The percentage of data missing in the original training data set is ", round(sum(is.na(data.train)) / (nrow(data.train) *ncol(data.train)),4)*100,"%",sep = "")
# The number of duplicated rows
paste("The number of duplicated rows are", nrow(data.train) - nrow(unique(data.train)))
str(data.train)
# data visualization
names(data.train)
data.train["BedroomAbvGr"]
library(ggplot2)
data.train["HalfBath"]
data.train["KitchenAbvGr"]
data.cat = names(data.train)[which(sapply(data.train, is.character))]
data.cat
data.cat = c(data.cat, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
data.cat
data.num = names(trains)[which(sapply(train, is.numeric))]
data.num = names(data.train)[which(sapply(data.train, is.numeric))]
data.num
# data visualization
names(data.train)
cat.var = names(data.train)[which(sapply(data.train, is.character))]
cat.var = c(cat.var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
num.var = names(data.train)[which(sapply(data.train, is.numeric))]
train.cat = data.train[cat.var]
train.cat
# data visualization
names(data.train)
cat.var = names(data.train)[which(sapply(data.train, is.character))]
cat.var = c(cat.var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
num.var = names(data.train)[which(sapply(data.train, is.numeric))]
train.cat = data.train[cat.var]
cat.var
train.cat = data.train[cat.var,]
train.cat
# data visualization
names(data.train)
cat.var = names(data.train)[which(sapply(data.train, is.character))]
cat.var = c(cat.var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
num.var = names(data.train)[which(sapply(data.train, is.numeric))]
train.cat = data.train[num.var]
train.cat
train.num = data.train[num.var]
train.num
data.train['BsmtFullBath']
train.var = data.train[cat.var]
data.train["BsmtHalfBath"]
data.train[c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')]
data.train[c(cat.var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')]
data.train["BsmtFullBath"]
data.train["KitchenAbvGr"]
data.train["MSSubClass"]
# data visualization
names(data.train)
cat.var = names(data.train)[which(sapply(data.train, is.character))]
num.var = names(data.train)[which(sapply(data.train, is.numeric))]
train.num = data.train[num.var]
train.num
train.cat = data.train[cat.var]
train.cat
plotHist <- function(data_in, i)
{
data <- data.frame(x=data_in[[i]])
p <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(data_in)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (p)
}
plotDen <- function(data_in, i){
data <- data.frame(x=data_in[[i]], SalePrice = data_in$SalePrice)
p <- ggplot(data= data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(data_in)[i]), '\n', 'Skewness: ',round(skewness(data_in[[i]], na.rm = TRUE), 2))) + theme_light()
return(p)
}
doPlots <- function(data_in, fun, ii, ncol=3)
{
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
doPlots(train.cat, fun = plotHist, ii = 1:4, ncol = 2)
library('ggplot2')
library('ggthemes')
library('scales')
library('dplyr')
library('mice')
library('randomForest')
library('data.table')
library('gridExtra')
library('corrplot')
library('GGally')
library('e1071')
doPlots(train.cat, fun = plotHist, ii = 1:4, ncol = 2)
# barplots for categorical features
doPlots(train.cat, fun = plotHist, ii = 1:8, ncol = 4)
# barplots for categorical features
png("./plot_cat.png")
doPlots(train.cat, fun = plotHist, ii = 1:8, ncol = 4)
dev.off()
# barplots for categorical features
png("./plot_cat.png")
doPlots(train.cat, fun = plotHist, ii = 1:8, ncol = 4,width=600, height=350)
# barplots for categorical features
png("./plot_cat.png")
doPlots(train.cat, fun = plotHist, ii = 1:4, ncol = 2)
dev.off()
png("./plot_cat2.png")
doPlots(train.cat, fun = plotHist, ii = 5:8, ncol = 2)
dev.off()
png("./plot_cat3.png")
doPlots(train.cat, fun = plotHist, ii = 9:12, ncol = 2)
dev.off()
png("./plot_cat4.png")
doPlots(train.cat, fun = plotHist, ii = 13:18, ncol = 2)
dev.off()
png("./plot_cat5.png")
doPlots(train.cat, fun = plotHist, ii = 19:22, ncol = 2)
dev.off()
ggplot(data.train, aes(x = Neighborhood, y = SalePrice)) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
# density plots for numeric variables
doPlots(train.num, fun = plotDen, ii = 2:6, ncol = 2)
# density plots for numeric variables
doPlots(train.num, fun = plotDen, ii = 2:5, ncol = 2)
# density plots for numeric variables
png("./plot_num.png")
doPlots(train.num, fun = plotDen, ii = 2:6, ncol = 2)
dev.off()
png("./plot_num2.png")
doPlots(train.num, fun = plotDen, ii = 7:12, ncol = 2)
dev.off()
png("./plot_num3.png")
doPlots(train.num, fun = plotDen, ii = 13:17, ncol = 2)
dev.off()
png("./plot_num4.png")
doPlots(train.num, fun = plotDen, ii = 18:23, ncol = 2)
dev.off()
png("./plot_num4.png")
doPlots(train.num, fun = plotHist, ii = 18:23, ncol = 2)
dev.off()
correlation = cor(na.omit(train.num[,-1]))
correlation
train.num
train.num.names
names(train.num)
apply(correlations, 1, function(x) sum(x > 0.3 | x < -0.3) > 1)
apply(correlation, 1, function(x) sum(x > 0.3 | x < -0.3) > 1)
apply(correlation, 0, function(x) sum(x > 0.3 | x < -0.3) > 1)
correlation
train.num[,-1]
train.num[-1]
correlation = cor(na.omit(train.num[,-1]))
row_indic = apply(correlation, 1, function(x) sum(x > 0.3 | x < -0.3) > 1)
correlation = correlation[row_indic,row_indic]
corrplot(correlation,method = "color")
corrplot(correlation,method = "square")
corrplot(correlation,method = "pie")
corrplot(correlation,method = "circle")
corrplot(correlation,method = "ellipes")
corrplot(correlation,method = "ellipse")
corrplot(correlation,method = "shade")
corrplot(correlation,method = "color")
corrplot(correlation,method = "number")
corrplot(correlation,method = "shade")
png("./corr.png")
corrplot(correlation,method = "shade")
dev.off()
summary(data.train$SalePrice)
quantile(data.train$SalePrice)
hist(data.train$SalePrice,col="blue")
hist(data.train$SalePrice,col="orange")
hist(data.train$SalePrice,col="blue")
hist(data.train$SalePrice,col="blue",bin=20)
hist(data.train$SalePrice,col="blue",bins=20)
hist(data.train$SalePrice,col="blue",bins=10)
summary(data.train$SalePrice)
quantile(data.train$SalePrice)
hist(data.train$SalePrice,col="blue",breaks = 20)
hist(data.train$SalePrice,col="blue",breaks = 4)
hist(data.train$SalePrice,col="blue",breaks = 30)
hist(data.train$SalePrice,col="blue",breaks = 25)
hist(data.train$SalePrice,col="blue",breaks = 25,main = "Distribution of SalePrice", xlab = "Sale Price")
png("./salesPHist.png")
hist(data.train$SalePrice,col="blue",breaks = 25,main = "Distribution of SalePrice", xlab = "Sale Price")
dev.off()
# Plotting 'GrLivArea' too see if there are any outliers
ggplot(data.train,aes(y=SalePrice,x=GrLivArea))+geom_point()
ggplot(data.train,aes(y=SalePrice,x=GrLivArea))
qplot(data.train$GrLivArea, data.train$SalePrice, data= data.train)
qplot(data.train$GrLivArea, data.train$SalePrice, data= data.train,col=data.train$GrLivArea>4000)
plot(data.train$GrLivArea, data.train$SalePrice)
plot(data.train$GrLivArea, data.train$SalePrice,col=data.train$GrLivArea>4000)
plot(data.train$GrLivArea, data.train$SalePrice)
points(data.train$GrLivArea>4000,col="red")
plot(data.train$GrLivArea, data.train$SalePrice,col="blue")
points(data.train$GrLivArea>4000,col="red")
plot(data.train$GrLivArea, data.train$SalePrice,col = data.train$GrLivArea>4000)
plot(data.train$GrLivArea, data.train$SalePrice,col = data.train$GrLivArea<4000)
points(data.train$GrLivArea>4000,col="red")
points(data.train$GrLivArea>4000,data.train$SalePrice, col="red")
plot(data.train$GrLivArea, data.train$SalePrice,col = data.train$GrLivArea<4000)
points(data.train$GrLivArea>4000,data.train$SalePrice, col="red")
qplot(data.train$GrLivArea, data.train$SalePrice, data= data.train,col=data.train$GrLivArea>4000)
qplot(data.train$GrLivArea, data.train$SalePrice, data= data.train,col=data.train$GrLivArea>4000,xlab = "GrLivArea", ylab="Sale Price")
# Plotting 'GrLivArea' too see if there are any outliers
png("./scatterPlot.png")
qplot(data.train$GrLivArea, data.train$SalePrice, data= data.train,col=data.train$GrLivArea>4000,xlab = "GrLivArea", ylab="Sale Price")
dev.off()
# Plotting 'GrLivArea' too see if there are any outliers
png("./scatterPlot.png")
qplot(GrLivArea, SalePrice, data= data.train,col=data.train$GrLivArea>4000,xlab = "GrLivArea", ylab="Sale Price")
# Plotting 'GrLivArea' too see if there are any outliers
png("./scatterPlot.png")
qplot(GrLivArea, SalePrice, data= data.train,col=GrLivArea>4000,xlab = "GrLivArea", ylab="Sale Price")
dev.off()
# Plotting 'GrLivArea' too see if there are any outliers
png("./scatterPlot.png")
qplot(GrLivArea, SalePrice, data= data.train,col=GrLivArea>4000,xlab = "GrLivArea", ylab="Sale Price",main = "Living Area vs. Sale Price")
dev.off()
summary(data.train$GrLivArea)
hist(data.train$GrLivArea)
hist(data.train$GrLivArea,breaks = 20)
hist(data.train$GrLivArea,breaks = 20,xlab="Living area")
hist(data.train$GrLivArea,breaks = 20,xlab="Living area",col = "red")
hist(data.train$GrLivArea,breaks = 20,xlab="Living area",col = "green")
hist(data.train$GrLivArea,breaks = 20,xlab="Living area",col = "dark green")
hist(data.train$GrLivArea,breaks = 20,xlab="Living area",col = "light red")
hist(data.train$GrLivArea,breaks = 20,xlab="Living area",col = "dark red")
hist(data.train$GrLivArea,breaks = 20,xlab="Living area",col = "dark red",main = "Frequency of Living area")
hist(data.train$GrLivArea,breaks = 20,xlab="Living area",col = "dark red",main = "Frequency of Living area square feet")
png("./GrLiveAreaHist.png")
hist(data.train$GrLivArea,breaks = 20,xlab="Living area",col = "dark red",main = "Frequency of Living area square feet")
dev.off()
source('~/.active-rstudio-document')
# Explore correlation
dim(train.num[,-1])
# Explore correlation
dim(train.num)
