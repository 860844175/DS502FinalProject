# p-value: < 2.2e-16
hist(y_test_log)
lm_pred = predict(lm_model, newdata = as.data.frame(test))
# Multiple R-squared: 0.9475,
# Adjusted R-squared: 0.9345
# F-statistic:  73.09  on 289 and 1170 DF,
# p-value: < 2.2e-16
hist(sqrtHouseP$SalePrice)
lm_pred = predict(lm_model, newdata = as.data.frame(test))
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = sqrt(newdata$SalePrice)
sumSqrt = summary(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,1/3)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,1/5)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,1/10)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,1/3)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,1/4)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,3/8)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,1/8)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,3/16)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
############ one-hot encoding and combine with scaled numerical data #######################################
factor = model.matrix(~.-1,factor) %>% as.data.frame()
newdata = cbind(snumeric,factor)
newdata$SalePrice = SalePrice
set.seed(1)
vault = sample(1:nrow(newdata), nrow(newdata)*0.15)
dVault = newdata[vault,]
newdata = newdata[-vault,]
oriHouseP = newdata
oriHouseP$SalePrice = newdata$SalePrice
sumOri = summary(oriHouseP$SalePrice)
sumOri
logHouseP = newdata
logHouseP$SalePrice = log(newdata$SalePrice)
sumLog = summary(logHouseP$SalePrice)
hist(logHouseP$SalePrice)
sumLog
sqrtHouseP = newdata
sqrtHouseP$SalePrice = '^'(newdata$SalePrice,1/4)
sumSqrt = summary(sqrtHouseP$SalePrice)
hist(sqrtHouseP$SalePrice)
sumSqrt
toFac <- function(original){
result = original
result$SalePrice[which(result$SalePrice<=summary(original$SalePrice)["1st Qu."])] = 0
result$SalePrice[which(result$SalePrice>=summary(original$SalePrice)["3rd Qu."])] = 2
result$SalePrice[which(result$SalePrice<summary(original$SalePrice)["3rd Qu."] & result$SalePrice>summary(original$SalePrice)["1st Qu."])] = 1
result$SalePrice = as.factor(result$SalePrice)
print(summary(result$SalePrice))
return(result)
}
oriHousePCl = toFac(oriHouseP)
logHousePCl = toFac(logHouseP)
sqrtHousePCl = toFac(sqrtHouseP)
bsF<- function(datadf, randomizer){
set.seed(randomizer)
sample = sample(dim(datadf)[1],dim(datadf)[1],replace = T)
btnewdata = datadf[sample,]
return(btnewdata)
}
newOriHouseP = bsF(oriHouseP, 1234)
newLogHouseP = bsF(logHouseP, 1234)
newSqrtHouseP = bsF(sqrtHouseP, 1234)
newOriHousePCl = bsF(oriHousePCl, 1234)
newLogHousePCl = bsF(logHousePCl, 1234)
newSqrtHousePCl = bsF(sqrtHousePCl, 1234)
toCsv <- function(df, fileName){
set.seed(10)
randS = sample(1:nrow(df), nrow(df)*0.7)
train = df[randS,]
test = df[-randS,]
write.csv(train,paste("./SourceData/train_",fileName, ".csv",sep=""), row.names = FALSE)
write.csv(test,paste("./SourceData/test_",fileName, ".csv",sep=""), row.names = FALSE)
}
toCsv(oriHouseP, "original")
toCsv(logHouseP, "log")
toCsv(sqrtHouseP, "sqrt")
toCsv(oriHousePCl, "original_cl")
toCsv(logHousePCl, "log_cl")
toCsv(sqrtHousePCl, "sqrt_cl")
test_ori = read.csv("./SourceData/test_original.csv")
y_test_ori = test_ori$SalePrice
x_test_ori = subset (test_ori, select = -SalePrice)
train_ori = read.csv("./SourceData/train_original.csv")
y_train_ori = train_ori$SalePrice
x_train_ori = subset (train_ori, select = -SalePrice)
y_train_ori = as.numeric(y_train_ori)
y_test_ori = as.numeric(y_test_ori)
summary(y_train_ori)
test_sqrt = read.csv("./SourceData/test_sqrt.csv")
y_test_sqrt = test_sqrt$SalePrice
x_test_sqrt = subset (test_sqrt, select = -SalePrice)
train_sqrt = read.csv("./SourceData/train_sqrt.csv")
y_train_sqrt = train_sqrt$SalePrice
x_train_sqrt = subset (train_sqrt, select = -SalePrice)
y_train_sqrt = as.numeric(y_train_sqrt)
y_test_sqrt = as.numeric(y_test_sqrt)
summary(y_train_sqrt)
test_ori_cl = read.csv("./SourceData/test_original_cl.csv")
y_test_ori_cl = test_ori_cl$SalePrice
x_test_ori_cl = subset (test_ori_cl, select = -SalePrice)
train_ori_cl = read.csv("./SourceData/train_original_cl.csv")
y_train_ori_cl = train_ori_cl$SalePrice
x_train_ori_cl = subset (train_ori_cl, select = -SalePrice)
y_train_ori_cl = as.factor(y_train_ori_cl)
y_test_ori_cl = as.factor(y_test_ori_cl)
summary(y_train_ori_cl)
test_log_cl = read.csv("./SourceData/test_original_cl.csv")
y_test_log_cl = test_log_cl$SalePrice
x_test_log_cl = subset (test_log_cl, select = -SalePrice)
train_log_cl = read.csv("./SourceData/train_original_cl.csv")
y_train_log_cl = train_log_cl$SalePrice
x_train_log_cl = subset (train_log_cl, select = -SalePrice)
y_train_log_cl = as.factor(y_train_log_cl)
y_test_log_cl = as.factor(y_test_log_cl)
summary(y_train_ori_cl)
test_sqrt_cl = read.csv("./SourceData/test_original_cl.csv")
y_test_sqrt_cl = test_sqrt_cl$SalePrice
x_test_sqrt_cl = subset (test_sqrt_cl, select = -SalePrice)
train_sqrt_cl = read.csv("./SourceData/train_original_cl.csv")
y_train_sqrt_cl = train_sqrt_cl$SalePrice
x_train_sqrt_cl = subset (train_sqrt_cl, select = -SalePrice)
y_train_sqrt_cl = as.factor(y_train_sqrt_cl)
y_test_sqrt_cl = as.factor(y_test_sqrt_cl)
summary(y_train_ori_cl)
lm_model = lm(formula = SalePrice ~.,data = train_log)
summary(lm_model)
lm_model = lm(formula = SalePrice ~.,data = train_log)
summary(lm_model)
# Multiple R-squared: 0.9475,
# Adjusted R-squared: 0.9345
# F-statistic:  73.09  on 289 and 1170 DF,
# p-value: < 2.2e-16
lm_log_pred = predict(lm_model, newdata = test_log)
accuracy = mean(abs(y_test - lm_log_pred)/y_test<=0.05)
# Multiple R-squared: 0.9475,
# Adjusted R-squared: 0.9345
# F-statistic:  73.09  on 289 and 1170 DF,
# p-value: < 2.2e-16
lm_log_pred = predict(lm_model, newdata = test_log)
accuracy = mean(abs(y_test_log - lm_log_pred)/y_test<=0.05)
# Multiple R-squared: 0.9475,
# Adjusted R-squared: 0.9345
# F-statistic:  73.09  on 289 and 1170 DF,
# p-value: < 2.2e-16
lm_log_pred = predict(lm_model, newdata = test_log)
accuracy = mean(abs(y_test_log - lm_log_pred)/y_test_log<=0.05)
printf("We have the accuracy of the model approximately %.2f%%", accuracy*100)
#lm_pred  = exp(lm_pred)
#result_lm_model = data.frame(Id = testing_data$Id, SalePrice = lm_pred)
# Multiple R-squared: 0.9475,
# Adjusted R-squared: 0.9345
# F-statistic:  73.09  on 289 and 1170 DF,
# p-value: < 2.2e-16
lm_log_pred = predict(lm_model, newdata = test_log)
accuracy = mean(abs(10^y_test_log - lm_log_pred)/y_test_log<=0.05)
printf("We have the accuracy of the model approximately %.2f%%", accuracy*100)
#lm_pred  = exp(lm_pred)
#result_lm_model = data.frame(Id = testing_data$Id, SalePrice = lm_pred)
# Multiple R-squared: 0.9475,
# Adjusted R-squared: 0.9345
# F-statistic:  73.09  on 289 and 1170 DF,
# p-value: < 2.2e-16
lm_log_pred = predict(lm_model, newdata = test_log)
accuracy = mean(abs(y_test_log - 10^lm_log_pred)/y_test_log<=0.05)
printf("We have the accuracy of the model approximately %.2f%%", accuracy*100)
#lm_pred  = exp(lm_pred)
#result_lm_model = data.frame(Id = testing_data$Id, SalePrice = lm_pred)
# Multiple R-squared: 0.9475,
# Adjusted R-squared: 0.9345
# F-statistic:  73.09  on 289 and 1170 DF,
# p-value: < 2.2e-16
lm_log_pred = predict(lm_model, newdata = test_log)
accuracy = mean(abs(y_test_log - '^'(10,lm_log_pred))/y_test_log<=0.05)
printf("We have the accuracy of the model approximately %.2f%%", accuracy*100)
#lm_pred  = exp(lm_pred)
#result_lm_model = data.frame(Id = testing_data$Id, SalePrice = lm_pred)
# Need to figure out how many independent variables then set mtry
# set mtry to be square root of total number of independent variables
totalIV = length(colnames(train_ori))
rfTrain=randomForest(SalePrice~.,data=train_ori, mtry=sqrt(totalIV),importance =TRUE)
pander(rfTrain)
rfYhat = predict(rfTrain, newdata=x_test_ori)
#table(y_test, rfYhat)
accuracy = mean(abs(y_test_ori - rfYhat)/y_test_ori<=0.05)
printf("We have the accuracy of the model approximately %.2f%%", accuracy*100)
printf("We have the MSE of the model approximately %.5f", mean((rfYhat-test$SalePrice)^2))
printf("We have the MSE of the model approximately %.5f", mean((rfYhat-test_ori$SalePrice)^2))
printf("We have the MSE of the model approximately equal to %.5f", mean((rfYhat-test_ori$SalePrice)^2))
importance = importance(rfTrain)
varImportance = head(data.frame(Variables = row.names(importance),
Importance =round(importance[, "%IncMSE"],1)),10)
rankImportance=varImportance%>%mutate(Rank=paste('#',dense_rank(desc(Importance))))
ggplot(rankImportance,aes(x=reorder(Variables,Importance),
y=Importance,fill=Importance))+
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'white') +
labs(x = 'Variables') +
coord_flip() +
theme_classic()
set.seed(123)
# computing model performance metrics
pander(data.frame( R2 = R2(rfYhat, y_test),
RMSE = RMSE(rfYhat, y_test),
MAE = MAE(rfYhat, y_test)), title="Cross Validation for Random Forest")
set.seed(123)
# computing model performance metrics
pander(data.frame( R2 = R2(rfYhat, y_test_ori),
RMSE = RMSE(rfYhat, y_test_ori),
MAE = MAE(rfYhat, y_test_ori)), title="Cross Validation for Random Forest")
fit1 = gam(SalePrice ~ s(LotFrontage) + ns(YearRemodAdd,2) + MasVnrArea, data = train)
fit1 = gam(SalePrice ~ s(LotFrontage) + ns(YearRemodAdd,2) + MasVnrArea, data = train_ori)
printf("Deviance of Model 1 approximately %.2f", deviance(fit1))
pred1 = predict(fit1, newdata=x_test)
fit1 = gam(SalePrice ~ s(LotFrontage) + ns(YearRemodAdd,2) + MasVnrArea, data = train_ori)
printf("Deviance of Model 1 approximately %.2f", deviance(fit1))
pred1 = predict(fit1, newdata=x_test_ori)
par(mfrow=c(2,1))
accuracy = mean(abs(y_test - pred1)/y_test<=0.05)
fit1 = gam(SalePrice ~ s(LotFrontage) + ns(YearRemodAdd,2) + MasVnrArea, data = train_ori)
printf("Deviance of Model 1 approximately %.2f", deviance(fit1))
pred1 = predict(fit1, newdata=x_test_ori)
par(mfrow=c(2,1))
accuracy = mean(abs(y_test_ori - pred1)/y_test_ori<=0.05)
printf("Accuracy of Model 1 approximately %.2f%%", accuracy*100)
plot(fit1 , se=TRUE , col="red")
fit2 = gam(SalePrice ~ LotFrontage + YearRemodAdd + s(MasVnrArea), data = train_ori)
printf("Deviance of Model 2 approximately %.2f", deviance(fit2))
pred2 = predict(fit2, newdata=x_test_ori)
accuracy = mean(abs(y_test_ori - pred2)/y_test_ori<=0.05)
printf("Accuracy of Model 2 approximately %.2f%%", accuracy*100)
plot(fit2 , se=TRUE , col="red")
fit3 = gam(SalePrice ~ ns(LotFrontage,3) + YearRemodAdd + s(MasVnrArea), data = train_ori)
printf("Deviance of Model 3 approximately %.2f", deviance(fit3))
pred3 = predict(fit3, newdata=x_test_ori)
accuracy = mean(abs(y_test_ori - pred3)/y_test_ori<=0.05)
printf("Accuracy of Model 3 approximately %.2f%%", accuracy*100)
plot(fit3 , se=TRUE , col="red")
anova(fit1,fit2,fit3,test="F")
set.seed(123)
pander(data.frame( R2 = R2(pred2, y_test),
RMSE = RMSE(pred2, y_test),
MAE = MAE(pred2, y_test)), title="Cross Validation of Model 2")
set.seed(123)
pander(data.frame( R2 = R2(pred2, y_test_ori),
RMSE = RMSE(pred2, y_test_ori),
MAE = MAE(pred2, y_test_ori)), title="Cross Validation of Model 2")
fit1 = gam(SalePrice ~ s(LotFrontage) + ns(YearRemodAdd,2) + MasVnrArea, data = train_ori)
printf("Deviance of Model 1 approximately %.2f", deviance(fit1))
pred1 = predict(fit1, newdata=x_test_ori)
par(mfrow=c(2,1))
accuracy = mean(abs(y_test_ori - pred1)/y_test_ori<=0.05)
printf("Accuracy of Model 1 approximately %.2f%%", accuracy*100)
plot(fit1 , se=TRUE , col="red")
fit1_log = gam(SalePrice ~ s(LotFrontage) + ns(YearRemodAdd,2) + MasVnrArea, data = train_log)
printf("Deviance of Model 1 approximately %.2f", deviance(fit1_log))
pred1 = predict(fit1, newdata=x_test_log)
par(mfrow=c(2,1))
accuracy = mean(abs(y_test_log - pred1)/y_test_log<=0.05)
printf("Accuracy of Model 1 approximately %.2f%%", accuracy*100)
plot(fit1_log , se=TRUE , col="red")
fit1_sqrt = gam(SalePrice ~ s(LotFrontage) + ns(YearRemodAdd,2) + MasVnrArea, data = train_sqrt)
printf("Deviance of Model 1 approximately %.2f", deviance(fit1_sqrt))
pred1 = predict(fit1, newdata=x_test_sqrt)
par(mfrow=c(2,1))
accuracy = mean(abs(y_test_sqrt - pred1)/y_test_sqrt<=0.05)
printf("Accuracy of Model 1 approximately %.2f%%", accuracy*100)
plot(fit1_sqrt , se=TRUE , col="red")
fit2 = gam(SalePrice ~ LotFrontage + YearRemodAdd + s(MasVnrArea), data = train_ori)
printf("Deviance of Model 2 approximately %.2f", deviance(fit2))
pred2 = predict(fit2, newdata=x_test_ori)
accuracy = mean(abs(y_test_ori - pred2)/y_test_ori<=0.05)
printf("Accuracy of Model 2 approximately %.2f%%", accuracy*100)
plot(fit2 , se=TRUE , col="red")
fit2_log = gam(SalePrice ~ LotFrontage + YearRemodAdd + s(MasVnrArea), data = train_log)
printf("Deviance of Model 2 approximately %.2f", deviance(fit2))
pred2 = predict(fit2, newdata=x_test_log)
accuracy = mean(abs(y_test_log - pred2)/y_test_log<=0.05)
printf("Accuracy of Model 2 approximately %.2f%%", accuracy*100)
plot(fit2_log , se=TRUE , col="red")
fit2_sqrt = gam(SalePrice ~ LotFrontage + YearRemodAdd + s(MasVnrArea), data = train_sqrt)
printf("Deviance of Model 2 approximately %.2f", deviance(fit2))
pred2 = predict(fit2, newdata=x_test_sqrt)
accuracy = mean(abs(y_test_sqrt - pred2)/y_test_sqrt<=0.05)
printf("Accuracy of Model 2 approximately %.2f%%", accuracy*100)
plot(fit2_sqrt , se=TRUE , col="red")
fit3 = gam(SalePrice ~ ns(LotFrontage,3) + YearRemodAdd + s(MasVnrArea), data = train_ori)
printf("Deviance of Model 3 approximately %.2f", deviance(fit3))
pred3 = predict(fit3, newdata=x_test_ori)
accuracy = mean(abs(y_test_ori - pred3)/y_test_ori<=0.05)
printf("Accuracy of Model 3 approximately %.2f%%", accuracy*100)
plot(fit3 , se=TRUE , col="red")
fit3_log = gam(SalePrice ~ ns(LotFrontage,3) + YearRemodAdd + s(MasVnrArea), data = train_log)
printf("Deviance of Model 3 approximately %.2f", deviance(fit3_log))
pred3 = predict(fit3_log, newdata=x_test_log)
accuracy = mean(abs(y_test_log - pred3)/y_test_log<=0.05)
printf("Accuracy of Model 3 approximately %.2f%%", accuracy*100)
plot(fit3_log, se=TRUE , col="red")
fit3_sqrt = gam(SalePrice ~ ns(LotFrontage,3) + YearRemodAdd + s(MasVnrArea), data = train_sqrt)
printf("Deviance of Model 3 approximately %.2f", deviance(fit3))
pred3 = predict(fit3_sqrt, newdata=x_test_sqrt)
accuracy = mean(abs(y_test_sqrt - pred3)/y_test_sqrt<=0.05)
printf("Accuracy of Model 3 approximately %.2f%%", accuracy*100)
plot(fit3 , se=TRUE , col="red")
fit3 = gam(SalePrice ~ ns(LotFrontage,3) + YearRemodAdd + s(MasVnrArea), data = train_ori)
printf("Deviance of Model 3 approximately %.2f", deviance(fit3))
pred3 = predict(fit3, newdata=x_test_ori)
accuracy = mean(abs(y_test_ori - pred3)/y_test_ori<=0.05)
printf("Accuracy of Model 3 approximately %.2f%%", accuracy*100)
plot(fit3 , se=TRUE , col="red")
fit3_log = gam(SalePrice ~ ns(LotFrontage,3) + YearRemodAdd + s(MasVnrArea), data = train_log)
printf("Deviance of Model 3 approximately %.2f", deviance(fit3_log))
pred3 = predict(fit3_log, newdata=x_test_log)
accuracy = mean(abs(y_test_log - pred3)/y_test_log<=0.05)
printf("Accuracy of Model 3 approximately %.2f%%", accuracy*100)
plot(fit3_log, se=TRUE , col="red")
fit3_sqrt = gam(SalePrice ~ ns(LotFrontage,3) + YearRemodAdd + s(MasVnrArea), data = train_sqrt)
printf("Deviance of Model 3 approximately %.2f", deviance(fit3))
pred3 = predict(fit3_sqrt, newdata=x_test_sqrt)
accuracy = mean(abs(y_test_sqrt - pred3)/y_test_sqrt<=0.05)
printf("Accuracy of Model 3 approximately %.2f%%", accuracy*100)
plot(fit3_sqrt , se=TRUE , col="red")
anova(fit1,fit2,fit3,test="F")
anova(fit1_log,fit2_log,fit3_log,test="F")
anova(fit1_sqrt,fit2_sqrt,fit3_sqrt,test="F")
