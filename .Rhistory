importance = importance(rfTrain_ori)
importancedf =  data.frame(Variables = row.names(importance), MSE = importance[,1])
importancedf <- importancedf[order(importancedf$MSE, decreasing = TRUE),]
ggplot(importancedf[1:10,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= 'Importance', title="Importance of Each Predictor Predicting \n Original Price") + coord_flip() + theme(legend.position="none",plot.title = element_text(size = 8, face = "bold",hjust = 0.5),)+theme_minimal()
importance = importance(rfTrain_log)
importancedf =  data.frame(Variables = row.names(importance), MSE = importance[,1])
importancedf <- importancedf[order(importancedf$MSE, decreasing = TRUE),]
ggplot(importancedf[1:10,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= 'Importance', title="Importance of Each Predictor Predicting \n Log Transformed Price") + coord_flip() + theme(legend.position="none",plot.title = element_text(size = 8, face = "bold",hjust = 0.5),)+theme_minimal()
importance = importance(rfTrain_sqrt)
importancedf =  data.frame(Variables = row.names(importance), MSE = importance[,1])
importancedf <- importancedf[order(importancedf$MSE, decreasing = TRUE),]
ggplot(importancedf[1:10,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= 'Importance', title="Importance of Each Predictor Predicting \n Fourth Root Transformed Price") + coord_flip() + theme(legend.position="none",plot.title = element_text(size = 8, hjust = 0.5),)+theme_minimal()
set.seed(123)
# computing model performance metrics
# pander(data.frame( R2 = R2(rfYhat, y_test_ori),
#             RMSE = RMSE(rfYhat, y_test_ori),
#             MAE = MAE(rfYhat, y_test_ori)), title="Cross Validation for Random Forest")
r2rf = c(R2(rfYhat_ori, y_test_ori),R2(exp(rfYhat_log), exp(y_test_log)),R2(rfYhat_sqrt^4, y_test_sqrt^4))
rmserf = c(RMSE(rfYhat_ori, y_test_ori),RMSE(exp(rfYhat_log), exp(y_test_log)),RMSE(rfYhat_sqrt^4, y_test_sqrt^4))
accrf = c(rf_accuracy_ori,rf_accuracy_log,rf_accuracy_sqrt)
x_train_ori.pr = prcomp(x_train_ori)
set.seed(2)
# PCA portion
train = sample(dim(train_ori)[1],size = dim(train_ori)[1]*0.7)
train.subset = train_ori[train,]
test = train_ori[-train,]
# bootstrap again
train.bs = sample(dim(train.subset)[1],replace = T)
train.df = train.subset[train.bs,]
# define a function to generate scree plots
pcaCharts <- function(x) {
x.var <- x$sdev ^ 2
x.pvar <- x.var/sum(x.var)
# print("proportions of variance:")
# print(x.pvar)
par(mfrow=c(2,2))
plot(x.pvar,xlab="Principal component", ylab="Proportion of variance", ylim=c(0,1), type='b',cex.lab=1, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(cumsum(x.pvar),xlab="Principal component", ylab="Cumulative", ylim=c(0,1), type='b',cex.lab=0.9, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
screeplot(x,cex.lab=0.8, cex.axis=0.8, cex.main=0.8, cex.sub=0.8)
screeplot(x,type="l",cex.lab=0.8, cex.axis=0.8, cex.main=0.8, cex.sub=0.8)
par(mfrow=c(1,1))
}
x = subset(train.df, select = -c(SalePrice) )
train.pca <- prcomp(x ,center = TRUE)
#pcaCharts(train.pca)
########################### insert an image  (pca_plot.png) #################################
pcr_fit = pcr(SalePrice~., data = train.df,validation = "CV")
# # summary(pcr_fit)
# validationplot(pcr_fit, val.type = "MSEP",cex.lab=1, cex.axis=0.8, cex.main=1.5, cex.sub=0.8)
# axis(side = 1, at = c(32), cex.axis=0.8)
# abline(v = 32, col = "blue", lty = 5)
########################### insert another image  (pcr_mse.png) #################################
pcaCharts(train.pca)
# start pcr
pcr_fit = pcr(SalePrice~., data = train.df,validation = "CV")
pcr_pred = predict(pcr_fit,test)
accuracy.ori = mean((test$SalePrice - pcr_pred[,,29])/test$SalePrice<=0.2 & (test$SalePrice - pcr_pred[,,29])/test$SalePrice>=-0.05)
rsq <- function(x, y) summary(lm(y~x))$r.squared
rsq.ori = rsq(test$SalePrice,pcr_pred[,,29])
rmse <-  function(m, o){sqrt(mean((m - o)^2))}
rmse.ori = rmse(test$SalePrice,pcr_pred[,,29])
set.seed(667)
train = sample(dim(train_log)[1],size = dim(train_log)[1]*0.7)
train.subset = train_log[train,]
test = train_log[-train,]
# bootstrap again
train.bs = sample(dim(train.subset)[1],replace = T)
train.df = train.subset[train.bs,]
pcr_fit = pcr(SalePrice~., data = train.df,validation = "CV")
pcr_pred = predict(pcr_fit,test)
accuracy.log = mean((exp(test$SalePrice) - exp(pcr_pred[,,29]))/exp(test$SalePrice<=0.2) & (exp(test$SalePrice) - exp(pcr_pred[,,29]))/exp(test$SalePrice)>=-0.05)
rsq.log = rsq(test$SalePrice,pcr_pred[,,29])
rmse.log = rmse(exp(test$SalePrice),exp(pcr_pred[,,29]))
set.seed(233)
train = sample(dim(train_sqrt)[1],size = dim(train_sqrt)[1]*0.7)
train.subset = train_sqrt[train,]
test = train_sqrt[-train,]
# bootstrap again
train.bs = sample(dim(train.subset)[1],replace = T)
train.df = train.subset[train.bs,]
pcr_fit = pcr(SalePrice~., data = train.df,validation = "CV")
pcr_pred = predict(pcr_fit,test)
accuracy.sqrt = mean((test$SalePrice^4 - pcr_pred[,,29]^4)/test$SalePrice^4<=0.2 & (test$SalePrice^4 - pcr_pred[,,29]^4)/test$SalePrice^4>=-0.05)
rsq.sqrt = rsq(test$SalePrice,pcr_pred[,,29])
rmse.sqrt = rmse(test$SalePrice^4,pcr_pred[,,29]^4)
x <- data.frame("y" = c("original","log","sqrt"), "Accuracy" = c(accuracy.ori,accuracy.log,accuracy.sqrt), "R2" = c(rsq.ori,rsq.log,rsq.sqrt),"RMSE" = c(rmse.ori,rmse.log,rmse.sqrt))
pander(x)
accpcr = c(accuracy.ori,accuracy.log,accuracy.sqrt)
r2pcr = c(rsq.ori,rsq.log,rsq.sqrt)
rmsepcr = c(rmse.ori,rmse.log,rmse.sqrt)
# original
# original
Ridge_ori_accuracy= rep(0,k)
Ridge_ori_lambda = rep(0,k)
Ridge_ori_R2 = rep(0,k)
Ridge_ori_MAE = rep(0,k)
Ridge_ori_RMSE = rep(0,k)
Ridge_ori_coef = 0
Ridge_ori_train = rep(0,k)
for ( i in 1:k){
set.seed(130+i)
sample = sample(nrow(train_ori),nrow(train_ori),replace = T)
ori_train = train_ori[sample,]
train = sample(nrow(ori_train),0.7*nrow(ori_train))
training_dataset = ori_train[train,]
validation_dataset = ori_train[-train,]
X_train = model.matrix(SalePrice~.,data = training_dataset)[,-1]
X_test = model.matrix(SalePrice~.,validation_dataset)[,-1]
y_train = training_dataset$SalePrice
y_test = validation_dataset$SalePrice
set.seed(1300+i)
grid=10^seq(10,-2, length =100)
Ridge.ori.Alpha=0
Ridge.ori.Fit = glmnet(X_train, y_train, alpha=Ridge.ori.Alpha, lambda=grid)
Ridge.ori.Fitcv = cv.glmnet(X_train, y_train, alpha = Ridge.ori.Alpha,nfolds = 10,type.measure = 'deviance')
#Ridge.ori.Fitcv = cv.glmnet(X_train, y_train, alpha = Ridge.ori.Alpha,lambda = grid )
Ridge.ori.lambda = Ridge.ori.Fitcv$lambda.min
Ridge_ori_lambda[i] = Ridge.ori.lambda
Ridge.ori.Pred <- predict(Ridge.ori.Fit, s= Ridge.ori.lambda, newx = X_test)
Ridge.ori.Pred1 = predict(Ridge.ori.Fit, s= Ridge.ori.lambda, newx = X_train)
Ridge_ori_train[i] = mean(-0.05<=(((Ridge.ori.Pred1)-(y_train))/(y_train))&(((Ridge.ori.Pred1)-(y_train))/(y_train)) <=0.2)
Ridge.ori.coef = predict(Ridge.ori.Fit, s = Ridge.ori.lambda, type="coefficients")
Ridge_ori_accuracy[i] = mean(-0.05<=(((Ridge.ori.Pred)-(y_test))/(y_test))&(((Ridge.ori.Pred)-(y_test))/(y_test)) <=0.2)
Ridge_ori_R2[i] = R2(Ridge.ori.Pred,(y_test))
Ridge_ori_RMSE[i]= RMSE(Ridge.ori.Pred,(y_test))
Ridge_ori_MAE[i] = MAE(Ridge.ori.Pred,(y_test))
}
Ridge_ori_aver_lambda = mean(Ridge_ori_lambda)
Ridge_ori_aver_accuracy = mean(Ridge_ori_accuracy)
Ridge_ori_aver_RMSE = mean(Ridge_ori_RMSE)
Ridge_ori_aver_R2 = mean(Ridge_ori_R2)
Ridge_ori_aver_MAE = mean(Ridge_ori_MAE)
Ridge_ori_aver_train = mean(Ridge_ori_train)
# log transformation
Ridge_log_accuracy= rep(0,k)
Ridge_log_lambda = rep(0,k)
Ridge_log_R2 = rep(0,k)
Ridge_log_MAE = rep(0,k)
Ridge_log_RMSE = rep(0,k)
Ridge_log_coef = 0
Ridge_log_train = rep(0,k)
for ( i in 1:k){
set.seed(220+i)
sample = sample(nrow(train_log),nrow(train_log),replace = T)
log_train = train_log[sample,]
train = sample(nrow(log_train),0.7*nrow(log_train))
training_dataset = log_train[train,]
validation_dataset = log_train[-train,]
X_train = model.matrix(SalePrice~.,data = training_dataset)[,-1]
X_test = model.matrix(SalePrice~.,validation_dataset)[,-1]
y_train = training_dataset$SalePrice
y_test = validation_dataset$SalePrice
set.seed(1220+i)
grid=10^seq(10,-2, length =100)
Ridge.log.Alpha=0
Ridge.log.Fit = glmnet(X_train, y_train, alpha=Ridge.log.Alpha, lambda=grid)
Ridge.log.Fitcv = cv.glmnet(X_train, y_train, alpha = Ridge.log.Alpha,nfolds = 10,type.measure = 'deviance')
#Ridge.log.Fitcv = cv.glmnet(X_train, y_train, alpha = Ridge.log.Alpha,lambda = grid )
Ridge.log.lambda = Ridge.log.Fitcv$lambda.min
Ridge_log_lambda[i] = Ridge.log.lambda
Ridge.log.Pred1 = predict(Ridge.log.Fit, s= Ridge.log.lambda, newx = X_train)
Ridge.log.Pred1 = exp(Ridge.log.Pred1)
Ridge_log_train[i] = mean(-0.05<=(((Ridge.log.Pred1)-exp(y_train))/exp(y_train))&(((Ridge.log.Pred1)-exp(y_train))/exp(y_train)) <=0.2)
Ridge.log.Pred = predict(Ridge.log.Fit, s= Ridge.log.lambda, newx = X_test)
Ridge.log.Pred = exp(Ridge.log.Pred)
Ridge.log.coef = predict(Ridge.log.Fit, s = Ridge.log.lambda, type="coefficients")
Ridge_log_accuracy[i] = mean(-0.05<=(((Ridge.log.Pred)-exp(y_test))/exp(y_test))&(((Ridge.log.Pred)-exp(y_test))/exp(y_test)) <=0.2)
Ridge_log_R2[i] = R2(Ridge.log.Pred,exp(y_test))
Ridge_log_RMSE[i]= RMSE(Ridge.log.Pred,exp(y_test))
Ridge_log_MAE[i] = MAE(Ridge.log.Pred,exp(y_test))
}
Ridge_log_aver_lambda = mean(Ridge_log_lambda)
Ridge_log_aver_accuracy = mean(Ridge_log_accuracy)
Ridge_log_aver_RMSE = mean(Ridge_log_RMSE)
Ridge_log_aver_R2 = mean(Ridge_log_R2)
Ridge_log_aver_MAE = mean(Ridge_log_MAE)
Ridge_log_aver_train = mean(Ridge_log_train)
# sqrt
Ridge_sqrt_accuracy= rep(0,k)
Ridge_sqrt_lambda = rep(0,k)
Ridge_sqrt_R2 = rep(0,k)
Ridge_sqrt_MAE = rep(0,k)
Ridge_sqrt_RMSE = rep(0,k)
Ridge_sqrt_coef = 0
Ridge_sqrt_train = rep(0,k)
for ( i in 1:k){
set.seed(240+i)
sample = sample(nrow(train_sqrt),nrow(train_sqrt),replace = T)
sqrt_train = train_sqrt[sample,]
train = sample(nrow(sqrt_train),0.7*nrow(sqrt_train))
training_dataset = sqrt_train[train,]
validation_dataset = sqrt_train[-train,]
X_train = model.matrix(SalePrice~.,data = training_dataset)[,-1]
X_test = model.matrix(SalePrice~.,validation_dataset)[,-1]
y_train = training_dataset$SalePrice
y_test = validation_dataset$SalePrice
set.seed(1240+i)
grid=10^seq(10,-2, length =100)
Ridge.sqrt.Alpha=0
Ridge.sqrt.Fit = glmnet(X_train, y_train, alpha=Ridge.sqrt.Alpha, lambda=grid)
Ridge.sqrt.Fitcv = cv.glmnet(X_train, y_train, alpha = Ridge.sqrt.Alpha,nfolds = 10,type.measure = 'deviance')
Ridge.sqrt.lambda = Ridge.sqrt.Fitcv$lambda.min
Ridge_sqrt_lambda[i] = Ridge.sqrt.lambda
Ridge.sqrt.Pred1 = predict(Ridge.sqrt.Fit, s= Ridge.sqrt.lambda, newx = X_train)
Ridge.sqrt.Pred1 = (Ridge.sqrt.Pred1)^4
Ridge_sqrt_train[i] = mean(-0.05<=(((Ridge.sqrt.Pred1)-(y_train)^4)/(y_train)^4)&(((Ridge.sqrt.Pred1)-(y_train)^4)/(y_train)^4) <=0.2)
Ridge.sqrt.Pred = predict(Ridge.sqrt.Fit, s= Ridge.sqrt.lambda, newx = X_test)
Ridge.sqrt.Pred = (Ridge.sqrt.Pred)^4
Ridge.sqrt.coef = predict(Ridge.sqrt.Fit, s = Ridge.sqrt.lambda, type="coefficients")
Ridge_sqrt_accuracy[i] = mean(-0.05<=(((Ridge.sqrt.Pred)-(y_test)^4)/(y_test)^4)&(((Ridge.sqrt.Pred)-(y_test)^4)/(y_test)^4) <=0.2)
Ridge_sqrt_R2[i] = R2(Ridge.sqrt.Pred,(y_test)^4)
Ridge_sqrt_RMSE[i]= RMSE(Ridge.sqrt.Pred,(y_test)^4)
Ridge_sqrt_MAE[i] = MAE(Ridge.sqrt.Pred,(y_test)^4)
}
Ridge_sqrt_aver_lambda = mean(Ridge_sqrt_lambda)
Ridge_sqrt_aver_accuracy = mean(Ridge_sqrt_accuracy)
Ridge_sqrt_aver_RMSE = mean(Ridge_sqrt_RMSE)
Ridge_sqrt_aver_R2 = mean(Ridge_sqrt_R2)
Ridge_sqrt_aver_MAE = mean(Ridge_sqrt_MAE)
Ridge_sqrt_aver_train = mean(Ridge_sqrt_train)
setwd("~/Documents/DS502/DS502FinalProject")
test = read.csv("./SourceData/test_sqrt.csv")
X_test = model.matrix(SalePrice~.,test)[,-1]
y_test = test["SalePrice"]
set.seed(1240+i)
grid=10^seq(10,-2, length =100)
Ridge.sqrt.Alpha=0
Ridge.sqrt.Fit = glmnet(X_train, y_train, alpha=Ridge.sqrt.Alpha, lambda=grid)
Ridge.sqrt.Fitcv = cv.glmnet(X_train, y_train, alpha = Ridge.sqrt.Alpha,nfolds = 10,type.measure = 'deviance')
Ridge.sqrt.lambda = Ridge.sqrt.Fitcv$lambda.min
Ridge_sqrt_lambda = Ridge.sqrt.lambda
Ridge.sqrt.Pred1 = predict(Ridge.sqrt.Fit, s= Ridge.sqrt.lambda, newx = X_train)
Ridge.sqrt.Pred1 = (Ridge.sqrt.Pred1)^4
Ridge_sqrt_train = mean(-0.05<=(((Ridge.sqrt.Pred1)-(y_train)^4)/(y_train)^4)&(((Ridge.sqrt.Pred1)-(y_train)^4)/(y_train)^4) <=0.2)
Ridge.sqrt.Pred = predict(Ridge.sqrt.Fit, s= Ridge.sqrt.lambda, newx = X_test)
Ridge.sqrt.Pred = (Ridge.sqrt.Pred)^4
Ridge.sqrt.coef = predict(Ridge.sqrt.Fit, s = Ridge.sqrt.lambda, type="coefficients")
Ridge_sqrt_accuracy = mean(-0.05<=(((Ridge.sqrt.Pred)-(y_test)^4)/(y_test)^4)&(((Ridge.sqrt.Pred)-(y_test)^4)/(y_test)^4) <=0.2)
Ridge_sqrt_R2 = R2(Ridge.sqrt.Pred,(y_test)^4)
Ridge_sqrt_RMSE= RMSE(Ridge.sqrt.Pred,(y_test)^4)
Ridge_sqrt_MAE = MAE(Ridge.sqrt.Pred,(y_test)^4)
# lambda of original
# lambda of log transformation
# lambda of sqrt transformation
temp = data.frame("y"=c("Original","Log","Fourth Rooted"), "lambda"=c(Ridge_ori_aver_lambda,Ridge_log_aver_lambda,Ridge_sqrt_aver_lambda))
pander(temp, caption="Lambda for Each Prediction")
#par(mfrow=c(2,2))
# plot(Ridge_ori_Fitcv)
# plot(Ridge_log_Fitcv)
# plot(Ridge_sqrt_Fitcv)
#(mfrow = c(1,1))
# original accuracy
printf("Accuracy of Ridge is approximately %.2f%%", Ridge_ori_aver_accuracy*100)
# log accuracy
printf("Accuracy of Ridge with Log Transformation is approximately %.2f%%", Ridge_log_aver_accuracy*100)
# sqrt accuracy
printf("Accuracy of Ridge with Sqrt Transformation is approximately %.2f%%", Ridge_sqrt_aver_accuracy*100)
# accuracy dataframe
Ridge_accuracy_df = data.frame(Ridge = c('training accuracy','testing accuracy'),
ori_accuracy =c(Ridge_ori_aver_train,Ridge_ori_aver_accuracy),
log_accuracy =c(Ridge_log_aver_train,Ridge_log_aver_accuracy),
sqrt_accuracy=c(Ridge_sqrt_aver_train,Ridge_sqrt_aver_accuracy))
# ori
Ridge_ori_RMSE
pander(data.frame(R2 = Ridge_ori_aver_R2,RMSE = Ridge_ori_aver_RMSE,MAE = Ridge_ori_aver_MAE),title="Cross Validation of Ridge Regression")
# log
Ridge_log_RMSE
pander(data.frame(R2 = Ridge_log_aver_R2, RMSE = Ridge_log_aver_RMSE, MAE = Ridge_log_aver_MAE ), title="Cross Validation of Ridge Regression After Log Transformation")
# sqrt
Ridge_sqrt_RMSE
pander(data.frame(R2 = Ridge_sqrt_aver_R2, RMSE = Ridge_sqrt_aver_RMSE, MAE = Ridge_sqrt_aver_MAE), title="Cross Validation of Ridge Regression After Sqrt Transformation")
accRidge = c(Ridge_ori_aver_accuracy, Ridge_log_aver_accuracy, Ridge_sqrt_aver_accuracy)
r2Ridge = c(Ridge_ori_aver_R2, Ridge_log_aver_R2, Ridge_sqrt_aver_R2)
rmseRidge =  c(Ridge_ori_aver_RMSE, Ridge_log_aver_RMSE, Ridge_sqrt_aver_RMSE)
# ori
k=5
Lasso_ori_accuracy= rep(0,k)
Lasso_ori_lambda = rep(0,k)
Lasso_ori_R2 = rep(0,k)
Lasso_ori_MAE = rep(0,k)
Lasso_ori_RMSE = rep(0,k)
Lasso_ori_coef = 0
Lasso_ori_train = rep(0,k)
for ( i in 1:k){
set.seed(330+i)
sample = sample(nrow(train_ori),nrow(train_ori),replace = T)
ori_train = train_ori[sample,]
train = sample(nrow(ori_train),0.7*nrow(ori_train))
training_dataset = ori_train[train,]
validation_dataset = ori_train[-train,]
X_train = model.matrix(SalePrice~.,data = training_dataset)[,-1]
X_test = model.matrix(SalePrice~.,validation_dataset)[,-1]
y_train = training_dataset$SalePrice
y_test = validation_dataset$SalePrice
set.seed(1330+i)
grid=10^seq(10,-2, length =100)
Lasso.ori.Alpha=1
Lasso.ori.Fit = glmnet(X_train, y_train, alpha=Lasso.ori.Alpha, lambda=grid)
Lasso.ori.Fitcv = cv.glmnet(X_train, y_train, alpha = Lasso.ori.Alpha,nfolds = 10,type.measure = 'deviance')
Lasso.ori.lambda = Lasso.ori.Fitcv$lambda.min
Lasso_ori_lambda[i] = Lasso.ori.lambda
Lasso.ori.Pred <- predict(Lasso.ori.Fit, s= Lasso.ori.lambda, newx = X_test)
Lasso.ori.Pred1 <- predict(Lasso.ori.Fit, s= Lasso.ori.lambda, newx = X_train)
Lasso.ori.coef = predict(Lasso.ori.Fit, s = Lasso.ori.lambda, type="coefficients")
Lasso_ori_coef = Lasso_ori_coef + Lasso.ori.coef
Lasso_ori_train[i] = mean(-0.05<=(((Lasso.ori.Pred1)-(y_train))/(y_train))&(((Lasso.ori.Pred1)-(y_train))/(y_train)) <=0.2)
Lasso_ori_accuracy[i] = mean(-0.05<=(((Lasso.ori.Pred)-(y_test))/(y_test))&(((Lasso.ori.Pred)-(y_test))/(y_test)) <=0.2)
Lasso_ori_R2[i] = R2(Lasso.ori.Pred,(y_test))
Lasso_ori_RMSE[i]= RMSE(Lasso.ori.Pred,(y_test))
Lasso_ori_MAE[i] = MAE(Lasso.ori.Pred,(y_test))
}
Lasso_ori_aver_lambda = mean(Lasso_ori_lambda)
Lasso_ori_aver_accuracy = mean(Lasso_ori_accuracy)
Lasso_ori_aver_RMSE = mean(Lasso_ori_RMSE)
Lasso_ori_aver_R2 = mean(Lasso_ori_R2)
Lasso_ori_aver_MAE = mean(Lasso_ori_MAE)
Lasso_ori_aver_train = mean(Lasso_ori_train)
n = length(Lasso.ori.coef)
Lasso_ori_aver_coef = (Lasso_ori_coef/5)[1:n,]
k = 5
Lasso_log_accuracy= rep(0,k)
Lasso_log_lambda = rep(0,k)
Lasso_log_R2 = rep(0,k)
Lasso_log_MAE = rep(0,k)
Lasso_log_RMSE = rep(0,k)
Lasso_log_coef = 0
Lasso_log_train = rep(0,k)
for ( i in 1:k){
set.seed(60+i)
sample = sample(nrow(train_log),nrow(train_log),replace = T)
log_train = train_log[sample,]
train = sample(nrow(log_train),0.7*nrow(log_train))
training_dataset = log_train[train,]
validation_dataset = log_train[-train,]
X_train = model.matrix(SalePrice~.,data = training_dataset)[,-1]
X_test = model.matrix(SalePrice~.,validation_dataset)[,-1]
y_train = training_dataset$SalePrice
y_test = validation_dataset$SalePrice
set.seed(150+i)
grid=10^seq(10,-2, length =100)
Lasso.log.Alpha=1
Lasso.log.Fit = glmnet(X_train, y_train, alpha=Lasso.log.Alpha, lambda=grid)
#Lasso.log.Fitcv = cv.glmnet(X_train, y_train, alpha = Lasso.log.Alpha,nfolds = 10,type.measure = 'deviance')
Lasso.log.Fitcv = cv.glmnet(X_train, y_train, alpha = Lasso.log.Alpha,lambda = grid)
Lasso.log.lambda = Lasso.log.Fitcv$lambda.min
Lasso_log_lambda[i] = Lasso.log.lambda
Lasso.log.Pred <- predict(Lasso.log.Fit, s= Lasso.log.lambda, newx = X_test)
Lasso.log.Pred = exp(Lasso.log.Pred)
Lasso.log.Pred1 <- predict(Lasso.log.Fit, s= Lasso.log.lambda, newx = X_train)
Lasso.log.Pred1 = exp(Lasso.log.Pred1)
Lasso.log.coef = predict(Lasso.log.Fit, s = Lasso.log.lambda, type="coefficients")
Lasso_log_coef = Lasso_log_coef + Lasso.log.coef
Lasso_log_train[i] = mean(-0.05<=(((Lasso.log.Pred1)-exp(y_train))/exp(y_train))&(((Lasso.log.Pred1)-exp(y_train))/exp(y_train)) <=0.2)
Lasso_log_accuracy[i] = mean(-0.05<=(((Lasso.log.Pred)-exp(y_test))/exp(y_test))&(((Lasso.log.Pred)-exp(y_test))/exp(y_test)) <=0.2)
Lasso_log_R2[i] = R2(Lasso.log.Pred,exp(y_test))
Lasso_log_RMSE[i]= RMSE(Lasso.log.Pred,exp(y_test))
Lasso_log_MAE[i] = MAE(Lasso.log.Pred,exp(y_test))
}
n = length(Lasso_log_coef)
Lasso_log_aver_coef = (Lasso_log_coef/5)[1:n,]
Lasso_log_aver_lambda = mean(Lasso_log_lambda)
Lasso_log_aver_accuracy = mean(Lasso_log_accuracy)
Lasso_log_aver_RMSE = mean(Lasso_log_RMSE)
Lasso_log_aver_R2 = mean(Lasso_log_R2)
Lasso_log_aver_MAE = mean(Lasso_log_MAE)
Lasso_log_aver_train = mean(Lasso_log_train)
# sqrt transformation
#sqrt
Lasso_sqrt_accuracy= rep(0,k)
Lasso_sqrt_lambda = rep(0,k)
Lasso_sqrt_R2 = rep(0,k)
Lasso_sqrt_MAE = rep(0,k)
Lasso_sqrt_RMSE = rep(0,k)
Lasso_sqrt_coef = 0
Lasso_sqrt_train = rep(0,k)
for ( i in 1:k){
set.seed(100+i)
sample = sample(nrow(train_sqrt),nrow(train_sqrt),replace = T)
sqrt_train = train_sqrt[sample,]
train = sample(nrow(sqrt_train),0.7*nrow(sqrt_train))
training_dataset = sqrt_train[train,]
validation_dataset = sqrt_train[-train,]
X_train = model.matrix(SalePrice~.,data = training_dataset)[,-1]
X_test = model.matrix(SalePrice~.,validation_dataset)[,-1]
y_train = training_dataset$SalePrice
y_test = validation_dataset$SalePrice
set.seed(1370+i)
grid=10^seq(10,-2, length =100)
Lasso.sqrt.Alpha=1
Lasso.sqrt.Fit = glmnet(X_train, y_train, alpha=Lasso.sqrt.Alpha, lambda=grid)
Lasso.sqrt.Fitcv = cv.glmnet(X_train, y_train, alpha = Lasso.sqrt.Alpha,nfolds = 10,type.measure = 'deviance')
Lasso.sqrt.lambda = Lasso.sqrt.Fitcv$lambda.min
Lasso_sqrt_lambda[i] = Lasso.sqrt.lambda
Lasso.sqrt.Pred = predict(Lasso.sqrt.Fit, s= Lasso.sqrt.lambda, newx = X_test)
Lasso.sqrt.Pred = Lasso.sqrt.Pred^4
Lasso.sqrt.Pred1 = predict(Lasso.sqrt.Fit, s= Lasso.sqrt.lambda, newx = X_train)
Lasso.sqrt.Pred1 = Lasso.sqrt.Pred1^4
Lasso.sqrt.coef = predict(Lasso.sqrt.Fit, s = Lasso.sqrt.lambda, type="coefficients")
Lasso_sqrt_coef = Lasso_sqrt_coef + Lasso.sqrt.coef
Lasso_sqrt_train[i] = mean(-0.05<=(((Lasso.sqrt.Pred1)-(y_train)^4)/(y_train)^4)&(((Lasso.sqrt.Pred1)-(y_train)^4)/(y_train)^4) <=0.2)
Lasso_sqrt_accuracy[i] = mean(-0.05<=(((Lasso.sqrt.Pred)-(y_test)^4)/(y_test)^4)&(((Lasso.sqrt.Pred)-(y_test)^4)/(y_test)^4) <=0.2)
Lasso_sqrt_R2[i] = R2(Lasso.sqrt.Pred,(y_test)^4)
Lasso_sqrt_RMSE[i]= RMSE(Lasso.sqrt.Pred,(y_test)^4)
Lasso_sqrt_MAE[i] = MAE(Lasso.sqrt.Pred,(y_test)^4)
}
n = length(Lasso_sqrt_coef)
Lasso_sqrt_aver_coef = (Lasso_sqrt_coef/5)[1:n,]
Lasso_sqrt_aver_lambda = mean(Lasso_sqrt_lambda)
Lasso_sqrt_aver_accuracy = mean(Lasso_sqrt_accuracy)
Lasso_sqrt_aver_RMSE = mean(Lasso_sqrt_RMSE)
Lasso_sqrt_aver_R2 = mean(Lasso_sqrt_R2)
Lasso_sqrt_aver_MAE = mean(Lasso_sqrt_MAE)
Lasso_sqrt_aver_train = mean(Lasso_sqrt_train)
# # lambda of original
# Lasso_ori_aver_lambda
# # lambda of log transformation
# Lasso_log_aver_lambda
# # lambda of sqrt transformation
# Lasso_sqrt_aver_lambda
temp = data.frame("y"=c("Original","Log","Fourth Rooted"), "lambda"=c(Lasso_ori_aver_lambda,Lasso_log_aver_lambda,Lasso_sqrt_aver_lambda))
pander(temp, caption="Lambda for Each Prediction")
#par(mfrow=c(2,2))
# plot(Lasso.ori.Fitcv)
# plot(Lasso.log.Fitcv)
# plot(Lasso.sqrt.Fitcv)
#par(mfrow = c(1,1))
imp_ori_La = head(sort(Lasso_ori_aver_coef[Lasso_ori_aver_coef!=0][-1],decreasing = TRUE),20)
imp_ori_La<-data.frame(imp_ori_La)
#imp_ori_La
imp_ori_df <- data.frame(Variables = row.names(imp_ori_La),coef = imp_ori_La[,1])
#imp_df <- imp_df[order(imp_df$imp_La, decreasing = TRUE),]
ggplot(imp_ori_df[1:10,], aes(x=reorder(Variables, coef), y=coef, fill=coef)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= 'Importance', title="Importance of Each Predictor Predicting \n Log Transformed Price") + coord_flip() + theme(legend.position="none",plot.title = element_text(size = 8, face = "bold",hjust = 0.5),)+theme_minimal()
#
#head(sort(Lasso_log_aver_coef[Lasso_log_aver_coef!=0][-1],decreasing = TRUE),20)
imp_log_La = head(sort(Lasso_log_aver_coef[Lasso_log_aver_coef!=0][-1],decreasing = TRUE),20)
imp_log_La<-data.frame(imp_log_La)
imp_log_df <- data.frame(Variables = row.names(imp_log_La),coef = imp_log_La[,1])
ggplot(imp_log_df[1:10,], aes(x=reorder(Variables, coef), y=coef, fill=coef)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= 'Importance', title="Importance of Each Predictor Predicting \n Log Transformed Price") + coord_flip() + theme(legend.position="none",plot.title = element_text(size = 8, face = "bold",hjust = 0.5),)+theme_minimal()
#
imp_sqrt_La = head(sort(Lasso_sqrt_aver_coef[Lasso_sqrt_aver_coef!=0][-1],decreasing = TRUE),20)
imp_sqrt_La<-data.frame(imp_sqrt_La)
imp_sqrt_df <- data.frame(Variables = row.names(imp_sqrt_La),coef = imp_sqrt_La[,1])
ggplot(imp_sqrt_df[1:10,], aes(x=reorder(Variables, coef), y=coef, fill=coef)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= 'Importance', title="Importance of Each Predictor Predicting \n Log Transformed Price") + coord_flip() + theme(legend.position="none",plot.title = element_text(size = 8, face = "bold",hjust = 0.5),)+theme_minimal()
# original accuracy
printf("Accuracy of Lasso is approximately %.2f%%", Lasso_ori_aver_accuracy*100)
# log accuracy
printf("Accuracy of Lasso with Log Transformation is approximately %.2f%%", Lasso_log_aver_accuracy*100)
# sqrt accuracy
printf("Accuracy of Lasso with Sqrt Transformation is approximately %.2f%%", Lasso_sqrt_aver_accuracy*100)
# accuracy dataframe
Lasso_accuracy_df = data.frame(Lasso = c('training accuracy','testing accuracy'),
ori_accuracy =c(Lasso_ori_aver_train,Lasso_ori_aver_accuracy),
log_accuracy =c(Lasso_log_aver_train,Lasso_log_aver_accuracy),
sqrt_accuracy=c(Lasso_sqrt_aver_train,Lasso_sqrt_aver_accuracy))
# ori
Lasso_ori_RMSE
Lasso_ori_aver_RMSE = mean(Lasso_ori_RMSE)
Lasso_ori_aver_R2 = mean(Lasso_ori_R2)
Lasso_ori_aver_MAE = mean(Lasso_ori_MAE)
pander(data.frame(R2 = Lasso_ori_aver_R2,RMSE = Lasso_ori_aver_RMSE,MAE = Lasso_ori_aver_MAE),title="Cross Validation of Lasso Regression")
# log
Lasso_log_RMSE
Lasso_log_aver_RMSE = mean(Lasso_log_RMSE)
Lasso_log_aver_R2 = mean(Lasso_log_R2)
Lasso_log_aver_MAE = mean(Lasso_log_MAE)
pander(data.frame(R2 = Lasso_log_aver_R2, RMSE = Lasso_log_aver_RMSE, MAE = Lasso_log_aver_MAE ), title="Cross Validation of Lasso Regression After Log Transformation")
# sqrt
Lasso_sqrt_RMSE
Lasso_sqrt_aver_RMSE = mean(Lasso_sqrt_RMSE)
Lasso_sqrt_aver_R2 = mean(Lasso_sqrt_R2)
Lasso_sqrt_aver_MAE = mean(Lasso_sqrt_MAE)
pander(data.frame(R2 = Lasso_sqrt_aver_R2, RMSE = Lasso_sqrt_aver_RMSE, MAE = Lasso_sqrt_aver_MAE), title="Cross Validation of Lasso Regression After Sqrt Transformation")
accLasso = c(Lasso_ori_aver_accuracy, Lasso_log_aver_accuracy,Lasso_sqrt_aver_accuracy)
r2Lasso = c(Lasso_ori_aver_R2, Lasso_log_aver_R2, Lasso_sqrt_aver_R2)
rmseLasso = c(Lasso_ori_aver_RMSE, Lasso_log_aver_RMSE, Lasso_sqrt_aver_RMSE)
r2result = data.frame("y"=c("Original","Log", "Fourth Root"),
"Linear Regression" = r2Lr,
"Random Forest"=r2rf,
"PCR" = r2pcr,
"Ridge"=r2Ridge,
"Lasso"=r2Lasso)
pander(r2result, caption="R squared Error Metric")
rmseResult = data.frame("y"=c("Original","Log", "Fourth Root"),
"Linear Regression" = rmseLr,
"Random Forest"=rmserf,
"PCR" = rmsepcr,
"Ridge"=rmseRidge,
"Lasso"=rmseLasso)
pander(rmseResult, caption="RMSE Error Metric")
accresult = data.frame("y"=c("Original","Log", "Fourth Root"),
"Linear Regression" = accLr,
"Random Forest"=accrf,
"PCR" = accpcr,
"Ridge"=accRidge,
"Lasso"=accLasso)
pander(accresult, caption="Accuracy Error Metric")
Ridge_sqrt_accuracy
Ridge_sqrt_aver_R2
Ridge_sqrt_aver_RMSE
temp = data.frame("Error Metric"=c("R2","RMSE","Accuracy"), "lambda"=c(Ridge_sqrt_aver_R2,Ridge_sqrt_aver_RMSE,Ridge_sqrt_accuracy))
pander(temp, caption="Final Result")
temp = data.frame("Error Metric"=c("R2","RMSE","Accuracy"), "lambda"=c(Ridge_sqrt_aver_R2,Ridge_sqrt_aver_RMSE,Ridge_sqrt_accuracy))
pander(temp, caption="Final Result")
temp = data.frame("Error Metric"=c("R2","RMSE","Accuracy"), "Value"=c(Ridge_sqrt_aver_R2,Ridge_sqrt_aver_RMSE,Ridge_sqrt_accuracy))
pander(temp, caption="Final Result")
temp = data.frame(""=c("R2","RMSE","Accuracy"), "Value"=c(Ridge_sqrt_aver_R2,Ridge_sqrt_aver_RMSE,Ridge_sqrt_accuracy))
temp = data.frame(" "=c("R2","RMSE","Accuracy"), "Value"=c(Ridge_sqrt_aver_R2,Ridge_sqrt_aver_RMSE,Ridge_sqrt_accuracy))
pander(temp, caption="Final Result")
temp = data.frame("Error Metric"=c("R2","RMSE","Accuracy"), "Value"=c(Ridge_sqrt_aver_R2,Ridge_sqrt_aver_RMSE,Ridge_sqrt_accuracy))
pander(temp, caption="Final Result")
temp = data.frame("Error Metrics"=c("R2","RMSE","Accuracy"), "Value"=c(Ridge_sqrt_aver_R2,Ridge_sqrt_aver_RMSE,Ridge_sqrt_accuracy))
pander(temp, caption="Final Result")
