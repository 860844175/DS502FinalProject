p <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(data_in)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (p)
}
plotDen <- function(data_in, i){
data <- data.frame(x=data_in[[i]], SalePrice = data_in$SalePrice)
p <- ggplot(data= data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(data_in)[i]), '\n', 'Skewness: ',round(skewness(data_in[[i]], na.rm = TRUE), 2))) + theme_light()
return(p)
}
doPlots <- function(data_in, fun, ii, ncol=3)
{
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
# barplots for categorical features
png("./plot_cat.png")
doPlots(train.cat, fun = plotHist, ii = 1:4, ncol = 2)
dev.off()
png("./plot_cat2.png")
doPlots(train.cat, fun = plotHist, ii = 5:8, ncol = 2)
dev.off()
png("./plot_cat3.png")
doPlots(train.cat, fun = plotHist, ii = 9:12, ncol = 2)
dev.off()
png("./plot_cat4.png")
doPlots(train.cat, fun = plotHist, ii = 13:18, ncol = 2)
dev.off()
png("./plot_cat5.png")
doPlots(train.cat, fun = plotHist, ii = 19:22, ncol = 2)
dev.off()
ggplot(HousePricing, aes(x = Neighborhood, y = SalePrice)) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
# density plots for numeric variables
png("./plot_num.png")
doPlots(train.num, fun = plotDen, ii = 2:6, ncol = 2)
dev.off()
png("./plot_num2.png")
doPlots(train.num, fun = plotDen, ii = 7:12, ncol = 2)
dev.off()
png("./plot_num3.png")
doPlots(train.num, fun = plotDen, ii = 13:17, ncol = 2)
dev.off()
png("./plot_num4.png")
doPlots(train.num, fun = plotHist, ii = 18:23, ncol = 2)
dev.off()
correlation = cor(na.omit(train.num[,-1]))
row_indic = apply(correlation, 1, function(x) sum(x > 0.3 | x < -0.3) > 1)
correlation = correlation[row_indic,row_indic]
png("./corr.png")
corrplot(correlation,method = "shade")
dev.off()
summary(HousePricing$SalePrice)
quantile(HousePricing$SalePrice)
png("./salesPHist.png")
hist(HousePricing$SalePrice,col="blue",breaks = 25,main = "Distribution of SalePrice", xlab = "Sale Price")
dev.off()
# Plotting 'GrLivArea' too see if there are any outliers
png("./scatterPlot.png")
qplot(GrLivArea, SalePrice, data= HousePricing,col=GrLivArea>4000,xlab = "GrLivArea", ylab="Sale Price",main = "Living Area vs. Sale Price")
dev.off()
summary(HousePricing$GrLivArea)
png("./GrLiveAreaHist.png")
hist(HousePricing$GrLivArea,breaks = 20,xlab="Living area",col = "dark red",main = "Frequency of Living area square feet")
dev.off()
plot(HousePricing$Neighborhood,HousePricing$SalePrice)
summary(HousePricing$Neighborhood)
nSalesPrice = HousePricing[,c("Neighborhood","SalePrice")]
nSalesPrice
aggregate(d[, 2], list(nSalesPrice$Neighborhood), mean)
aggregate(nSalesPrice[, 2], list(nSalesPrice$Neighborhood), mean)
avgPriceN = aggregate(nSalesPrice[, 2], list(nSalesPrice$Neighborhood), mean)
plot(avgPriceN$Group.1,avgPriceN$x)
plot(avgPriceN$Group.1,avgPriceN$x,data=avgPriceN)
barplot(avgPriceN$Group.1,avgPriceN$x,data=avgPriceN)
barplot(avgPriceN$x,avgPriceN$Group.1, data=avgPriceN)
barplot(avgPriceN$x, data=avgPriceN)
barplot(avgPriceN$x, data=avgPriceN,names.arg = avgPriceN$Group.1)
barplot(avgPriceN$x, data=avgPriceN,names.arg = avgPriceN$Group.1,horiz=TRUE)
barplot(avgPriceN$x, names.arg = avgPriceN$Group.1,horiz=TRUE)
avgPriceN
ggplot(avgPriceN, aes(x=Group.1, y=x)) +
geom_bar(stat = "identity")
ggplot(avgPriceN, aes(x=Group.1, y=x)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(avgPriceN, aes(x=Group.1, y=x)) +
geom_bar(stat = "identity") +
coord_flip() + scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
ggplot(avgPriceN, aes(x=Group.1, y=x)) +
geom_bar() +
coord_flip() + scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
ggplot(avgPriceN, aes(x=Group.1, y=x)) +
geom_bar(stat = "identity") +
coord_flip() + scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
extraData = read.csv("./data/extraData.csv")
head(extraData)
extraData$Alias[1]
dim(extraData)
seq(dim(extraData)[1])
df1.len = seq(dim(HousePricing)[1])
df1.len
print(i)
for (i in df1.len) {
print(i)
}
setwd("~/OneDrive - Worcester Polytechnic Institute (wpi.edu)/2020Fall/DS502/DS502FinalProject/SourceData")
train.original = read.csv("./train_original.csv")
train.original
dim(train.original)
library(dplyr)
library(tidyr)
library(pls)
train = sample(train.original,dim(train.original)[1]*0.7)
train = sample(dim(train.original)[1],dim(train.original)[1]*0.7)
train
train.original = read.csv("./train_original.csv")
dim(train.original)
library(dplyr)
library(tidyr)
library(pls)
set.seed(666)
train = sample(dim(train.original)[1],size = dim(train.original)[1]*0.7)
train.subset = train.original[train,]
train.subset
dim(train.subset)
train.original = read.csv("./train_original.csv")
dim(train.original)
library(dplyr)
library(tidyr)
library(pls)
set.seed(666)
train = sample(dim(train.original)[1],size = dim(train.original)[1]*0.7)
train.subset = train.original[train,]
dim(train.subset)
test = train.original[-train,]
dim(test)
sample(10)
a = sample(10)
sample(a,replace = T)
train.bs = sample(dim(train.subset)[1],replace = T)
print(train.bs)
print(train.bs)
print(train)
train.df = train.subset[train.bs,]
dim(train.df)
pcr_fit = pcr(SalesPrice~., data = train.df, scale = TRUE, validation = "CV")
pcr_fit = pcr(SalePrice~., data = train.df, scale = TRUE, validation = "CV")
pcr_fit = pcr(SalePrice~., data = train.df,  validation = "CV")
pcr_fit
summary(pcr_fit)
validationplot(pcr_fit, val.type = "MSEP")
pcr_fit$scores
pcr_fit$ncomp
pcr_fit$Ymeans
pcr_fit$fitted.values
summary(pcr_fit)
pcr_fit$validation
pcr_fit$model
pcr_fit$Yloadings
pcr_fit$projection
pcr_fit$terms
pcr_fit$loadings
pcr_fit$scores
summary(pcr_fit)
pcr_fit$validation
summary(pcr_fit)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(8), cex.axis=0.7)
abline(v = 8, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(8), cex.axis=1.0)
abline(v = 8, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(17), cex.axis=1.0)
abline(v = 8, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(51), cex.axis=1.0)
abline(v = 8, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(25), cex.axis=1.0)
abline(v = 25, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(25), cex.axis=1.0)
abline(v = 32, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(25), cex.axis=1.0)
abline(v = 25, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(26), cex.axis=1.0)
abline(v = 26, col = "blue", lty = 3)
pcr_pred = predict(pcr_fit,test)
pcr_pred
summary(pcr_pred)
validationplot(pcr_fit, val.type = "MSEP")
validationplot(pcr_pred, val.type = "MSEP")
pcr_pred[1]
pcr_pred[731]
dim(test)
dim(pcr_pred)
typeof(pcr_pred)
pcr_pred[862*26]
pcr_pred[863]
pcr_pred[862*2+1]
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(7), cex.axis=1.0)
abline(v = 7, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(5), cex.axis=1.0)
abline(v = 5, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(4), cex.axis=1.0)
abline(v = 4, col = "blue", lty = 3)
summary(pcr_fit)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(30), cex.axis=1.0)
abline(v = 30, col = "blue", lty = 3)
validationplot(pcr_fit, val.type = "MSEP")
axis(side = 1, at = c(32), cex.axis=1.0)
abline(v = 32, col = "blue", lty = 3)
abline(v = 26, col = "green", lty = 3)
abline(v = 26, col = "dark green", lty = 5)
abline(v = 32, col = "blue", lty = 5)
axis(side = 1, at = c(26), cex.axis=1.0)
dim(pcr_pred)
pcr_pred
pcr_pred[862*4+1]
pcr_pred[862*4]
pcr_pred[862*3+1]
pcr_pred[1]
pcr_pred[,862]
pcr_pred[862]
dim(pcr_pred)
pcr_pred[1][1]
pcr_pred[4][1]
pcr_pred[3][1]
pcr_pred[3][1]
pcr_pred[0]
pcr_pred[862]
pcr_pred[862*5]
pcr_pred[862*4+731]
pcr_pred[862*3+731]
head(pcr_pred)
pcr_pred[68]
pcr_pred[167][1]
pcr_pred[1][167]
pcr_pred[,,167]
pcr_pred[,,30]
pcr_pred[,,30]-test$SalePrice
MSE(y_pred = pcr_pred[,,30], y_true = test$SalePrice)
mse(y_pred = pcr_pred[,,30], y_true = test$SalePrice)
MSEP(y_pred = pcr_pred[,,30], y_true = test$SalePrice)
(pcr_pred[,,30]-test$SalePrice)^2
mean((pcr_pred[,,30]-test$SalePrice)^2)
summary(pcr_fit)
accuracy = mean(abs(test$SalePrice - pcr_pred[,,30])/test$SalePrice<=0.05)
printf("We have the accuracy of the model approximately %.2f%%", accuracy*100)
print("We have the accuracy of the model approximately %.2f%%", accuracy*100)
accuracy
accuracy
paste("We have the accuracy of the model approximately %.2f%%", accuracy*100)
paste("We have the accuracy of the model approximately", accuracy*100)
accuracy = mean(abs(test$SalePrice - pcr_pred[,,30])/test$SalePrice<=0.1)
accuracy
paste("We have the accuracy of the model approximately", accuracy*100)
pcr_fit$fitted.values
pcr_fit$fitted.values[,,32]
mean((pcr_pred[,,32]-test$SalePrice)^2)
accuracy = mean(abs(test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.1)
accuracy
accuracy = mean(abs(train.df$SalePrice - pcr_fit$fitted.values[,,32])/train.df$SalePrice<=0.1)
accuracy
accuracy = mean(abs(train.df$SalePrice - pcr_fit$fitted.values[,,32])/train.df$SalePrice<=0.2)
accuracy
accuracy = mean(abs(test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.2)
accuracy
nSalesPrice = HousePricing[,c("Neighborhood","SalePrice")]
avgPriceN = aggregate(nSalesPrice[, 2], list(nSalesPrice$Neighborhood), mean)
avgPriceN
ggplot(avgPriceN, aes(x=Group.1, y=x)) +
geom_bar(stat = "identity") +
coord_flip() + scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
extraData = read.csv("./data/extraData.csv")
accuracy = mean((y_test_ori - rfYhat)/y_test_ori<=0.5 && (y_test_ori - rfYhat)/y_test_ori>=-0.1)
accuracy = mean((test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.5 && (test$SalePrice - pcr_pred[,,32])/test$SalePrice>=-0.1)
accuracy
accuracy = mean((test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.2 && (test$SalePrice - pcr_pred[,,32])/test$SalePrice>=-0.1)
accuracy
accuracy = mean((test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.2 & (test$SalePrice - pcr_pred[,,32])/test$SalePrice>=-0.1)
accuracy
accuracy = mean((test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.5 & (test$SalePrice - pcr_pred[,,32])/test$SalePrice>=-0.1)
accuracy
accuracy = mean((test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.2 & (test$SalePrice - pcr_pred[,,32])/test$SalePrice>=-0.1)
accuracy
accuracy = mean((test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.2 & (test$SalePrice - pcr_pred[,,32])/test$SalePrice>=-0.05)
accuracy
accuracy = mean((train.df$SalePrice - pcr_fit$fitted.values[,,32])/train.df$SalePrice<=0.2 & (train.df$SalePrice - pcr_fit$fitted.values[,,32])/train.df$SalePrice>=-0.05)
accuracy
accuracy = mean((train.df$SalePrice - pcr_fit$fitted.values[,,32])/train.df$SalePrice<=0.5 & (train.df$SalePrice - pcr_fit$fitted.values[,,32])/train.df$SalePrice>=-0.05)
accuracy
accuracy = mean((test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.5 & (test$SalePrice - pcr_pred[,,32])/test$SalePrice>=-0.05)
accuracy
accuracy = mean((test$SalePrice - pcr_pred[,,32])/test$SalePrice<=0.2 & (test$SalePrice - pcr_pred[,,32])/test$SalePrice>=-0.05)
accuracy
accuracy = mean((train.df$SalePrice - pcr_fit$fitted.values[,,32])/train.df$SalePrice<=0.2 & (train.df$SalePrice - pcr_fit$fitted.values[,,32])/train.df$SalePrice>=-0.05)
accuracy
# check R version
R.Version()$major
# set up document
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(fig.width=5,fig.height=3)
library(pander)
install.packages("pander")
# check R version
R.Version()$major
# set up document
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(fig.width=5,fig.height=3)
library(pander)
library(knitr)
library(skimr)
install.packages("skimr")
# check R version
R.Version()$major
# set up document
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(fig.width=5,fig.height=3)
library(pander)
library(knitr)
library(skimr)
library(kableExtra)
install.packages("kableExtra")
# check R version
R.Version()$major
# set up document
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(fig.width=5,fig.height=3)
library(pander)
library(knitr)
library(skimr)
library(kableExtra)
library(tinytex)
library(dplyr)
library(purrr)
local({
hook_inline = knitr::knit_hooks$get('inline')
knitr::knit_hooks$set(inline = function(x) {
res = hook_inline(x)
if (is.numeric(x)) sprintf('$%s$', res) else res
})
})
# define printf function
printf <- function(...)print(sprintf(...))
# Import model libraries
library(pls)
library(randomForest)
library(gam)
library(glmnet)
library(ggplot2)
library(corrplot)
library(tidyverse)
install.packages("tidyverse")
# Import model libraries
library(pls)
library(randomForest)
library(gam)
library(glmnet)
library(ggplot2)
library(corrplot)
library(tidyverse)
library(caret)
install.packages("caret")
install.packages("mgcv")
install.packages("Metrics")
install.packages("visreg")
# Import model libraries
library(pls)
library(randomForest)
library(gam)
library(glmnet)
library(ggplot2)
library(corrplot)
library(tidyverse)
library(caret)
library(mgcv)
library(Metrics)
library(visreg)
library(boot)
library('ggthemes')
library('scales')
library('mice')
library('data.table')
library('gridExtra')
library('GGally')
library('e1071')
setwd("~/OneDrive - Worcester Polytechnic Institute (wpi.edu)/2020Fall/DS502/DS502FinalProject")
HousePricing = read.csv("./SourceData/train_new.csv")
# check R version
R.Version()$major
# set up document
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(fig.width=5,fig.height=3)
library(pander)
library(knitr)
library(skimr)
library(kableExtra)
library(tinytex)
library(dplyr)
library(purrr)
local({
hook_inline = knitr::knit_hooks$get('inline')
knitr::knit_hooks$set(inline = function(x) {
res = hook_inline(x)
if (is.numeric(x)) sprintf('$%s$', res) else res
})
})
# define printf function
printf <- function(...)print(sprintf(...))
# Import model libraries
library(pls)
library(randomForest)
library(gam)
library(glmnet)
library(ggplot2)
library(corrplot)
library(tidyverse)
library(caret)
library(mgcv)
library(Metrics)
library(visreg)
library(boot)
library('ggthemes')
library('scales')
library('mice')
library('data.table')
library('gridExtra')
library('GGally')
library('e1071')
HousePricing = read.csv("./SourceData/train_new.csv")
setwd("~/OneDrive - Worcester Polytechnic Institute (wpi.edu)/2020Fall/DS502/DS502FinalProject")
# check R version
R.Version()$major
# set up document
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(fig.width=5,fig.height=3)
library(pander)
library(knitr)
library(skimr)
library(kableExtra)
library(tinytex)
library(dplyr)
library(purrr)
local({
hook_inline = knitr::knit_hooks$get('inline')
knitr::knit_hooks$set(inline = function(x) {
res = hook_inline(x)
if (is.numeric(x)) sprintf('$%s$', res) else res
})
})
# define printf function
printf <- function(...)print(sprintf(...))
# Import model libraries
library(pls)
library(randomForest)
library(gam)
library(glmnet)
library(ggplot2)
library(corrplot)
library(tidyverse)
library(caret)
library(mgcv)
library(Metrics)
library(visreg)
library(boot)
library('ggthemes')
library('scales')
library('mice')
library('data.table')
library('gridExtra')
library('GGally')
library('e1071')
HousePricing = read.csv("./SourceData/train_new.csv")
setwd("~/OneDrive - Worcester Polytechnic Institute (wpi.edu)/2020Fall/DS502/DS502FinalProject")
HousePricing = read.csv("./SourceData/train_new.csv")
HousePricing = read.csv("./SourceData/train.csv")
HousePricing = read.csv("./SourceData/train_new.csv")
setwd("~/OneDrive - Worcester Polytechnic Institute (wpi.edu)/2020Fall/DS502/DS502FinalProject/SourceData")
HousePricing = read.csv("./train_new.csv")
